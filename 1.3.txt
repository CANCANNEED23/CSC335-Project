;; [ANDREW MOBUS, Chengshui Zhu, Rezwan]
;; [TLS Interpreter PROJECT 1.1]
;; CSC 33500, Programming Language Paradigms, Spring 2025

; 
;  1.3 After giving a specification for the environment subsystem of TLS, prove that your implementation
;      satisfies this specification.  Then change the representation of environemnts to use lists of
;      bindings rather than the names-values pairs shown in the text, and show that the altered
;      representation both satisfies your specification and works with the rest of the interpreter.
; 


; For the Environment Subsystem Specification 1.1 (this is a recap, for most detailed specification, please see 1.1)
; The structure of the of it is:

;    Representation:
;    Environments are lists of entries.
;    Each entry is a pair of parallel lists: (names values).
;    Example: ( (x y) (1 2) ) binds x to 1, y to 2.

;    Look up:
;    For a name x, search entries sequentially:
;    Check the first entry’s names list.
;    If found, return the corresponding value from the values list.
;    If not found, proceed to the next entry.
;    If no entry contains x, trigger a failure continuation.

;    Extending:
;    extend-table adds a new (names values) entry to the front of the environment.

;    Scoping:
;    Inner entries shadow outer ones (lexical scoping).

; Here where inside apply-clousure in 1.1 is where variable and their value is seperate:
; (extend-table
;         (new-entry (formals-of closure) vals)
;         (table-of closure)
;       ) ; END_EXTEND_TABLE

;   (formals-of closure) gives a list of formal parameters, e.g., (x y).
;   vals is the list of actual argument values, e.g., (3 5).
;   new-entry pairs them into a new environment frame: ((x 3) (y 5))

; Proof of Correctness for v1.1:

;Environment Structure
; (define new-entry build-pair) ; creates (names values) pair
; (define extend-table cons)    ; adds entry to environment

;    Proofs:
;    The code directly matches the specification. new-entry pairs names and values, while extend-table prepends new entries.

;Lookup
; (define lookup-in-entry-help
;   (lambda (name names values entry-f)
;     (cond
;       ((null? names) (entry-f name))
;       ((eq? (car names) name) (car values))
;       (else (lookup-in-entry-help name (cdr names) (cdr values) entry-f))))
; 

;   Proofs:
;   Base Case: Empty names triggers entry-f.
;   Inductive Step: Recursively checks names/values in parallel.

;   Example:
; (lookup-in-entry 'x '((x y) (1 2)) → 1 (correct).
; (lookup-in-entry 'z '((x y) (1 2)) → entry-f (correct).


;Scoping
; (define lookup-in-table
;   (lambda (name table table-f)
;     (cond
;       ((null? table) (table-f name))
;       (else (lookup-in-entry ... (cdr table))))) ; search next entry

;   Proofs:
;   The first entry (most recent) is checked first.
;   Lookup for x returns 2 (inner binding shadows outer).


; Proof of Correctness for v1.3:

; starting with 
(value '((lambda (x y) (cons x y)) 3 4))

; returns 
(meaning '((lambda (x y) (cons x y)) 3 4) initial-global-environment)
; initial-global-environment is the primitives defined, they are loaded into the env first
; but not defined in the env

; it's not an atom so
(list-to-action '((lambda (x y) (cons x y)) 3 4))












;;;----------------------------------------------------------------------------|

;; atom? : any -> boolean
;; Returns #t if x is neither a pair nor null, #f otherwise
;; Example: (atom? 'a) => #t, (atom? '(1 2)) => #f
(define atom?
  (lambda (x)
    (and (not (pair? x)) (not (null? x)))
    );END LAMBDA
  );END DEFINE


;;;----------------------------------------------------------------------------|

;; :atom? : any -> boolean
;; Extended atom check that also recognizes primitive/non-primitive tags
;; Example: (:atom? 'cons) => #t, (:atom? '(primitive cons)) => #t
(define :atom?
  (lambda (x)
    (cond
      ((atom? x) #t)
      ((null? x) #f)
      ((eq? (car x) 'primitive) #t)
      ((eq? (car x) 'non-primitive) #t)
      (else #f))
    );END LAMBDA
  );END DEFINE

;;;----------------------------------------------------------------------------|

;; add1 : number -> number
;; Adds 1 to the given number.
;; Example: (add1 5) => 6
(define add1
  (lambda (num)
    (+ num 1)
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; sub1 : number -> number
;; Subtracts 1 from the given number.
;; Example: (sub1 5) => 4
(define sub1
  (lambda (num)
    (- num 1)
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; eq-atom? : any any -> boolean
;; Compares two atoms, treating numbers specially (must be same numeric value).
;; For non-numbers, uses standard eq? comparison.
;; Examples: 
;;   (eq-atom? 3 3) => #t
;;   (eq-atom? 'a 'a) => #t
;;   (eq-atom? 3 '3) => #f
(define eq-atom?
  (lambda (atom-one atom-two)
    (cond
      ((and (number? atom-one) (number? atom-two))
       (= atom-one atom-two))
      ((or (number? atom-one) (number? atom-two))
       #f)
      (else
       (eq? atom-one atom-two)))
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; eq-list? : list list -> boolean
;; Deeply compares two lists element-wise using tls-equal? for elements.
;; Returns #t only if lists have same structure and all elements are equal.
;; Examples:
;;   (eq-list? '(a (b)) '(a (b))) => #t
;;   (eq-list? '(a b) '(a c)) => #f
;;   (eq-list? '() '()) => #t
(define eq-list?
  (lambda (list-one list-two)
    (cond
      ((and (null? list-one) (null? list-two)) #t)
      ((or (null? list-one) (null? list-two)) #f)
      (else
       (and (tls-equal? (car list-one) (car list-two))
            (eq-list? (cdr list-one) (cdr list-two)))))
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; tls-equal? : sexpr sexpr -> boolean
;; Deep equality check for s-expressions, using eq-atom? for atoms and eq-list? for lists.
;; Examples:
;;   (tls-equal? 'a 'a) => #t
;;   (tls-equal? '(1 (2)) '(1 (2))) => #t
;;   (tls-equal? 'a '(a)) => #f
(define tls-equal?
(lambda (sexpr-one sexpr-two)
(cond
((and (atom? sexpr-one) (atom? sexpr-two)) (eq-atom? sexpr-one sexpr-two))
((or (atom? sexpr-one) (atom? sexpr-two)) #f)
(else (eq-list? sexpr-one sexpr-two))
) ; END_COND
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define first car)

;;;----------------------------------------------------------------------------|

(define second cadr)

;;;----------------------------------------------------------------------------|

(define third caddr)

;;;----------------------------------------------------------------------------|

(define build-pair
  (lambda (sexpr-one sexpr-two)
    (cons sexpr-one
          (cons sexpr-two '()))
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; new-entry : list-of-symbols × list-of-values -> environment-entry
;; Creates a new environment entry by pairing names with values
;; Example: (new-entry '(x y) '(1 2)) => ((x 1) (y 2))
(define new-entry
  (lambda (names values)
    (map (lambda (n v) (list n v)) names values)
    );END LAMBDA
  ); END DEFINE

;;;----------------------------------------------------------------------------|

;; lookup-in-entry : symbol entry procedure -> any
;; Searches for a name in an entry (list of names/values pairs).
;; If not found, applies the entry-f procedure.
;; Side-effect: Prints debug message showing entry being searched.
;; Examples:
;;   (lookup-in-entry 'x '((x 1) (y 2)) (lambda () #f)) => 1
;;   (lookup-in-entry 'z '((x 1)) (lambda () 'not-found)) => 'not-found
(define lookup-in-entry
  (lambda (name entry entry-f)
    (display "Looking up in entry: ") (display entry) (newline)
    (lookup-in-entry-help name entry entry-f)
    )
  )

;;;----------------------------------------------------------------------------|

;; lookup-in-entry-help : symbol entry procedure -> any
;; Helper function for lookup-in-entry that searches an association list.
;; Returns value if name found, otherwise applies entry-f continuation.
;; Side-effect: Prints lookup status messages for debugging.
;; Examples:
;;   (lookup-in-entry-help 'x '((x 1)) (lambda (n) #f)) => 1
;;   (lookup-in-entry-help 'y '() (lambda (n) 'missing)) => 'missing
(define lookup-in-entry-help
  (lambda (name entry entry-f)
    (cond
      ((null? entry) 
       (display "Name not found: ") (display name) (newline)
       (entry-f name))
      ((eq? (caar entry) name) 
       (display "Found binding: ") (display (car entry)) (newline)
       (cadar entry))
      (else 
       (lookup-in-entry-help name (cdr entry) entry-f))
      )
    )
  )

;;;----------------------------------------------------------------------------|

;; extend-table : list-of-symbols × list-of-values × environment -> environment
;; Extends an environment with new bindings
;; Example: (extend-table '(a) '(1) '()) => (((a 1)))
(define extend-table
  (lambda (names values env)
    (let ((new-bindings (map (lambda (n v) (list n v)) names values)))
      (display "Extended environment with bindings: ") (display new-bindings) (newline)
      (cons new-bindings env))
    )
  )

;;;----------------------------------------------------------------------------|

;; lookup-in-table : symbol table procedure -> any
;; Searches for a name in a table (list of entries).
;; If not found in any entry, applies the table-f procedure.
;; Table is searched sequentially from first to last entry.
;; Examples:
;;   (lookup-in-table 'x '(((x 1)) (lambda (n) #f)) => 1
;;   (lookup-in-table 'y '(((x 1)) (lambda (n) 'not-found)) => 'not-found
(define lookup-in-table
  (lambda (name table table-f)
    (cond
      (  (null? table) (table-f name)  ) ;; Case 1: Empty table - not found
      (else
       (lookup-in-entry name ;; Case 2: Search current entry, then rest of table if not found
                        (car table)  
                        (lambda (name) 
                          (lookup-in-table name (cdr table) table-f))
                        ) ; END_LOOKUP_IN_ENTRY
       ) ; END_ELSE
      ) ; END_COND
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; value : s-expression -> scheme-value
;; The main interface to the interpreter
;; Example: (value '(add1 5)) => 6
(define value
(lambda (ze-expr)
(  meaning ze-expr initial-global-environment )
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|


;; meaning : s-expression × environment -> scheme-value
;; Evaluates an expression in a given environment
;; Example: (meaning 'x '(((x 1))) => 1
(define meaning
(lambda (ze-expr table)
( (expression-to-action ze-expr)
    ze-expr
    table
) ; UNSURE
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; produce correct function for each possible S-expression

(define expression-to-action
(lambda (ze-expr)
(cond
(  (atom? ze-expr) (atom-to-action ze-expr)  )
(       else (list-to-action ze-expr)        )
) ; END_COND
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; call *const function if ze-expr is a
;; number, boolean, or primitive operator
;; otherwise, it's a variable

(define atom-to-action
(lambda (ze-expr)
(cond

(  (number? ze-expr)      *const)
(  (eq? ze-expr #t)       *const)
(  (eq? ze-expr #f)       *const)

      (else *identifier)

) ; END_COND
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; check the car of ze-expr to see
;; if it is quote, lambda, or cond
;; else it is *application

(define list-to-action
(lambda (ze-expr)
(cond

(  (null? ze-expr) *empty-list)

(  (atom? (car ze-expr))

(cond

(  (eq? (car ze-expr) 'quote)  *quote )
(  (eq? (car ze-expr) 'lambda) *lambda)
(  (eq? (car ze-expr) 'cond)   *cond  )

        (else *application)

) ; END_COND_2
) ; UNSURE

          (else *application)
) ; END_COND_1
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define *const
(lambda (ze-expr table)
(cond
  ( (number? ze-expr) ze-expr) ; return itself
  ( (eq? ze-expr #t) #t)       ; return itself
  ( (eq? ze-expr #f) #f)       ; return itself
(else
  (build-pair 'primitive ze-expr)) ; attach primitive tag on expression
) ; END_COND
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define *quote
(lambda (ze-expr table)
(second ze-expr) ; Return value following quote
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define *identifier ;; these are variables
(lambda (ze-expr table)
(lookup-in-table ; Look for symbol (in the table)
  ze-expr
  table
  initial-table
) ; END_LOOKUP
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; initial-table : symbol -> 'unbound-variable
;; Returns 'unbound-variable when a name isn't found in the environment
(define initial-table
  (lambda (name)
    'unbound-variable);END LAMBDA
  );END DEFINE

;;;----------------------------------------------------------------------------|

(define *lambda
  (lambda (ze-expr table)
    (build-pair 'non-primitive
                (list table          ; captured environment
                      (cadr ze-expr) ; formal parameters
                      (caddr ze-expr)
                      )
                ) ; END_BUILD
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define *cond
(lambda (ze-expr table)
(evcon (cond-lines-of ze-expr) table)
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define *empty-list
  (lambda (ze-expr table)
    'empty-procedure-given
) ; END_LAMBDA
) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define cond-lines-of cdr)

;;;----------------------------------------------------------------------------|


;; evcon : cond-lines table -> any
;; Evaluates cond clauses sequentially until a true condition is found.
;; Each line should be a pair of (question answer) expressions.
;; Returns the meaning of the answer for the first true question.
;; Examples:
;;   (evcon '((#t 1) (#f 2)) table) => 1
;;   (evcon '((#f 1) (else 2)) table) => 2
(define evcon
  (lambda (lines table)
    (cond
      (
       (else? (question-of (car lines)))
       (meaning (answer-of (car lines)) table)
       )
      (
       (meaning (question-of (car lines)) table)
       (meaning (answer-of (car lines)) table)
       )
      (else (evcon (cdr lines) table) )
      ) ; END_COND
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define else? ; checks whether predicate is else
  (lambda (predicate)
    (cond
      (  (atom? predicate) (eq? predicate 'else)  )
      (else #f)
      ) ; END_COND
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define question-of first)

;;;----------------------------------------------------------------------------|

(define answer-of second)

;;;----------------------------------------------------------------------------|

;; Action for application
;; Apply the meaning of function
;; to meaning of argument
;; to get new expression and environment

(define *application
  (lambda (ze-expr table)
    (tls-apply
     (  meaning (function-of ze-expr) table  )
     (  evlis (arguments-of ze-expr) table   )
     ) ; END_APPLY
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define function-of car)

;;;----------------------------------------------------------------------------|

(define arguments-of cdr)

;;;----------------------------------------------------------------------------|

;; evlis : list table -> list
;; Evaluates each element in args using the given table/environment,
;; returning a new list of evaluated results.
;; Examples:
;;   (evlis '(1 (+ 2 3)) table) => (1 5)
;;   (evlis '() table) => ()

(define evlis
  (lambda (args table)
    (cond
      (  (null? args) '()  )
      (else
       (cons
        (  meaning (car args) table  )
        (  evlis   (cdr args) table  )
        ) ; END_CONS
       ) ; END_ELSE
      ) ; END_COND
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; tls-apply : function-descriptor list -> any
;; Applies a function to evaluated arguments, handling both primitive and closure cases.
;; The function descriptor should be either:
;;   - (primitive <name>) for built-ins
;;   - (non-primitive <closure>) for user-defined functions
;; Examples:
;;   (tls-apply '(primitive +) '(1 2)) => 3
;;   (tls-apply '(non-primitive (closure (x) x '((a 1)))) '(2)) => 2

(define tls-apply
  (lambda (fun vals)
    (cond
      (
       (primitive? fun)
       (apply-primitive (second fun) vals)
       )
      (
       (non-primitive? fun)
       (apply-closure (second fun) vals)
       )
      ) ; END_COND
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define primitive?
  (lambda (l)
    (eq? (first l) 'primitive)
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define non-primitive?
  (lambda (l)
    (eq? (first l) 'non-primitive)
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define apply-primitive
  (lambda (name vals)
    (cond

      ;;;--------------------|

      ( (eq? name 'null?)
        (null? (first vals))
        ) ; END_CASE

      ( (eq? name 'atom?)
        (:atom? (first vals))
        ) ; END_CASE

      ;;;--------------------|

      ( (eq? name 'zero?)
        (zero? (first vals))
        ) ; END_CASE

      ( (eq? name 'number?)
        (number? (first vals))
        ) ; END_CASE

      ;;;--------------------|

      ( (eq? name 'car)
        (car (first vals))
        ) ; END_CASE

      ( (eq? name 'cdr)
        (cdr (first vals))
        ) ; END_CASE

      ;;;--------------------|

      ( (eq? name 'add1)
        (add1 (first vals))
        ) ; END_CASE

      ( (eq? name 'sub1)
        (sub1 (first vals))
        ) ; END_CASE

      ;;;--------------------|

      ( (eq? name 'cons)
        (cons (first vals) (second vals)  )
        ) ; END_CASE

      ( (eq? name 'eq?)
        (eq? (first vals) (second vals)  )
        ) ; END_CASE

      ;;;--------------------|

      ) ; END_COND
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; initial-global-environment : entry
;; The starting environment containing core Scheme primitives.
;; Each primitive is stored as (primitive <name>) pairs.
;; Includes: cons, car, cdr, null?, eq?, atom?, zero?, number?, add1, sub1
(define initial-global-environment
  (list 
   (new-entry 
    '(cons car cdr null? eq? atom? zero? number? add1 sub1)
    (list 
     (build-pair 'primitive 'cons)
     (build-pair 'primitive 'car)
     (build-pair 'primitive 'cdr)
     (build-pair 'primitive 'null?)
     (build-pair 'primitive 'eq?)
     (build-pair 'primitive 'atom?)
     (build-pair 'primitive 'zero?)
     (build-pair 'primitive 'number?)
     (build-pair 'primitive 'add1)
     (build-pair 'primitive 'sub1)
     );LIST
    );NEW ENTRY
   );LIST
  );DEFINE

;;;----------------------------------------------------------------------------|

(define :atom?
  (lambda (x)
    (cond
      (  (atom? x) #t)
      (  (null? x) #f)
      (  (eq? (car x) 'primitive) #t)
      (  (eq? (car x) 'non-primitive) #t)
      (else #f)
      ) ; END_COND
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

;; apply-closure : closure list -> any
;; Applies a closure to evaluated arguments by:
;; 1. Extending the closure's environment with the parameter bindings
;; 2. Evaluating the closure's body in the extended environment
;; Closure format assumed: (closure <formals> <body> <table>)
;; Examples:
;;   (apply-closure '(closure (x) x '()) '(1)) => 1
;;   (apply-closure '(closure (a b) (+ a b) '()) '(2 3)) => 5
(define apply-closure
  (lambda (closure vals)
    (meaning
     (body-of closure)
     (extend-table
      (formals-of closure)
      vals
      (table-of closure)
      ) ; END_EXTEND_TABLE
     ) ; END_MEANING
    ) ; END_LAMBDA
  ) ; END_DEFINE

;;;----------------------------------------------------------------------------|

(define table-of first)

(define formals-of second)

(define body-of third)

;;;----------------------------------------------------------------------------|

;; [FIN]


;; TEST EXAMPLES

;; Atomics

(value '42)               ; => 42
(value '#t)              ; => #t
(value '(add1 5))        ; => 6
(value '(cons 'a '(b c))) ; => (a b c)


;; QUOTED LIST

(value '(quote a))
(value '(quote 1 2 3))


;; PRIMITIVE APPLICATION

(value '(add1 4))     ; => 5
(value '(sub1 4))     ; => 3
(value '(zero? 0))    ; => #t

;; CONDITIONALS

(value '(cond ((zero? 1) 'wrong)
             ((zero? 0) 'right)
             (else 'other))) ; => right

(value '(cond (#f 'never) 
             (else 'default))) ; => default


;; LAMBDA(FUNCTION)

(value
 '((lambda (x) (add1 x)) 5))  ; => 6

(value
 '((lambda (x) x) 1)) ; => 1

(value '((lambda (x) x) 'hello)) ; => hello

(value '((lambda (f x) (f x)) 
       add1 
       5)) ; => 6

;; Lexical scoping test
(value '((lambda (x)
           ((lambda (y) (cons x y)) 'b))
           'a)) ; => (a b)

;; NESTED FUNCTION

(value
  '((lambda (x)
     ((lambda (y) (add1 y)) x))
   10)) ; => 11

;; Unbound variable
(value 'x) ; => unbound-variable

;; Empty list
(value '()) ; => empty-procedure-given

;; Nested empty lists
(value '(quote ())) ; => ()


